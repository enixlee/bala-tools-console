<?php
/**
 * Created by PhpStorm.
 * User: zhipeng
 * Date: 15/12/9
 * Time: 下午2:42
 */

namespace ZeusConsole\Commands\Client;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Yaml\Yaml;
use ZeusConsole\Commands\CommandBase;
use ZeusConsole\Utils\utils;

class ClientPackageRemoveUnused extends CommandBase
{
    /**
     * Configures the current command.
     */
    protected function configure()
    {
        $this->setName('client:removeUnused')
            ->setDescription("删除->转移->多余的SVN打包文件,只保留最后2个版本");
        $this->addOption('keepCount', null, InputOption::VALUE_OPTIONAL, "保留安装包数量,建议最少是2", 2);
    }

    /**
     * Initializes the command just after the input has been validated.
     *
     * This is mainly useful when a lot of commands extends one main command
     * where some things need to be initialized based on the input arguments and options.
     *
     * @param InputInterface $input An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     */
    protected function initialize(InputInterface $input, OutputInterface $output)

    {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub
    }

    /**
     * Executes the current command.
     *
     * This method is not abstract because you can use this class
     * as a concrete class. In this case, instead of defining the
     * execute() method, you set the code to execute by passing
     * a Closure to the setCode() method.
     *
     * @param InputInterface $input An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     *
     * @return null|int null or 0 if everything went fine, or an error code
     *
     * @throws \LogicException When this abstract method is not implemented
     *
     * @see setCode()
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $packageInfos = $this->getPackageInfos();

//        var_dump(count($packageInfos));

        $keepCount = $input->getOption('keepCount');

        if ($keepCount < 1) {
            return 2;
        }

        //需要删除的增量包列表
        $removeIncreasePackages = $this->getRemoveIncreasePackageVersions($packageInfos);

//        var_dump($removeIncreasePackages, $keepCount);

        //需要删除的安装包列表
        $removeAppInstallPackages = $this->getRemoveAppInstallPackageVersions($packageInfos);


//        return 1;
        //svn根目录
        $svnRootPath = "svn://192.168.1.2/cooking_packages/trunk/";
        //开始移动版本

        //移动增量更新包
        foreach ($removeIncreasePackages as $packageInfo) {
            $packageUpgradeSvnPath = $svnRootPath . "clientUpgradePackages/" . $packageInfo->getClientversion();
            $packageUpgradeOldSvnPath = $svnRootPath . "clientUpgradePackagesOld/" . $packageInfo->getClientversion();
            $process = utils::createSvnProcess(
                [
                    'ls',
                    $packageUpgradeSvnPath
                ]
            );
            $process->run();
            if ($process->getExitCode() === 0) {

                $output->writeln("清理增量包: from: $packageUpgradeSvnPath to: $packageUpgradeOldSvnPath");

                $process = utils::createSvnProcess([
                    'move',
                    $packageUpgradeSvnPath,
                    $packageUpgradeOldSvnPath,
                    '-m',
                    "remove Unused Packages: lua(" . $packageInfo->getClientversion() . ")"
                ]);
                $process->run();

                if ($process->getExitCode() !== 0) {
                    return 1;
                }
            }
        }

        foreach ($removeAppInstallPackages as $removeAppInstallPackage) {
            //移动安装包
            $packageInstallSvnPath = $svnRootPath . "installPackages/" . $removeAppInstallPackage->getCppversion();
            $packageInstallOldSvnPath = $svnRootPath . "installPackagesOld/" . $removeAppInstallPackage->getCppversion();

            $process = utils::createSvnProcess(
                [
                    'ls',
                    $packageInstallSvnPath
                ]
            );
            $process->run();
            if ($process->getExitCode() === 0) {

                $output->writeln("清理安装包: from: $packageInstallSvnPath to: $packageInstallOldSvnPath");

                $process = utils::createSvnProcess([
                    'move',
                    $packageInstallSvnPath,
                    $packageInstallOldSvnPath,
                    '-m',
                    "remove Unused Install Packages: cpp(" . $removeAppInstallPackage->getCppversion() . ")"
                ]);
                $process->run();

                if ($process->getExitCode() !== 0) {
                    return 1;
                }
            }
        }

        $output->writeln("<info>整理完成</info>");
        return 0;
    }


    /**
     * 获取打包信息
     * @return ClientPackData[]
     */
    private function getPackageInfos()
    {
        $process = utils::createSvnProcess([
            'cat',
            'svn://192.168.1.2/cooking_packages/trunk/clientUpgradePackageInfo/packagelist.json'
        ]);

        $process->run();
        $contents = $process->getOutput();
//        if ($this->verboseDebug) {
//            echo $yaml;
//        }
//        if ($process->getExitCode() != 0) {
//            return [];
//        }

        $packages = utils::getSerializer()->deserialize($contents,
            '\ZeusConsole\Commands\Client\ClientPackData[]', "json");

//        $PackageInfos = Yaml::parse($yaml);

        return $packages;


    }

    /**
     * 获取要删除的增量更新包的版本号
     * @param ClientPackData[] $packageInfos
     * @param int $keepCount
     * @return ClientPackData[]
     */
    private function getRemoveIncreasePackageVersions(array $packageInfos, $keepCount = 2)
    {
        $removePackageInfos = [];
        if (count($packageInfos) <= $keepCount) {
            return [];
        }
        $removeCount = count($packageInfos) - $keepCount;

        for ($i = 0; $i < $removeCount; $i++) {
            $removePackageInfos[] = $packageInfos[$i];
        }
        return $removePackageInfos;

    }

    /**
     * 获取需要删除的安装列表版本号
     * @param ClientPackData[] $packageInfos
     * @param int $keepCount
     * @return ClientPackData[]
     */
    private function getRemoveAppInstallPackageVersions(array $packageInfos, $keepCount = 1)
    {

        $appVersions = [];
        foreach ($packageInfos as $packageInfo) {

            $appVersions[$packageInfo->getCppversion()] = $packageInfo;
        }
        if (count($appVersions) <= $keepCount) {
            return [];
        }

        $removePackageInfos = [];
        $appVersions = array_values($appVersions);
        $removeCount = count($appVersions) - $keepCount;
        for ($i = 0; $i < $removeCount; $i++) {
            $removePackageInfos[] = $appVersions[$i];
        }
        return $removePackageInfos;
    }


}